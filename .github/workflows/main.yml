# 언제 이 파일의 내용이 실행될 것인지 정의합니다.
# 여기서는 main 브랜치에 코드가 push 되거나 pull_request되었을 때 실행할 것을 말하고 있습니다.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용합니다.
permissions:
  contents: read

# 실제 실행될 내용들을 정의합니다.
jobs:
  build:
    runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행
    steps:
      # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
      - uses: actions/checkout@v4 # Node.js 20을 사용하는 최신 버전으로 업데이트

      # open jdk 17 버전 환경을 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4 # Node.js 20을 사용하는 최신 버전으로 업데이트
        with:
          java-version: '17'
          distribution: "adopt"

      # gradle을 통해 소스를 빌드.
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
      # 이 때 사용되는 ${{ secrets.DOCKER_REPO }}/directors-dev 가 위에서 만든 도커 repository 입니다.
      - name: Docker build & push to docker repo
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker build -f Dockerfile -t ${{ secrets.DOCKERHUB_REPO }} .
          docker push ${{ secrets.DOCKERHUB_REPO }}

      # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행합니다.!!
      # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것입니다.
      # 실행 시, docker-compose를 사용합니다.
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            sudo docker rm -f $(sudo docker ps -qa)
            sudo docker pull ${{ secrets.DOCKERHUB_REPO }}
            sudo docker run -d -p 8080:8080 --name worldcup-back ${{ secrets.DOCKERHUB_REPO }}
            sudo docker image prune -f
